{"version":3,"sources":["webpack:///./src/utils/globalObjects.ts","webpack:///./src/components/views/User/Edit.tsx"],"names":["GlobalObjects","withRouter","props","createGroup","bind","changeGroup","state","errors","loading","saving","permsadmin","permsinstance","canRead","canEdit","canEditOwnPassword","canEditOwnOAuth","tab","match","params","groups","createGroupName","newOAuthConnections","RouteData","selecteduserid","parseInt","id","selectedusertab","prevProps","this","setState","userid","response","UserClient","getUser","code","StatusCode","ERROR","addError","error","OK","loadUser","payload","currentuser","getCurrentUser","resolvePermissionSet","administrationRights","AdministrationRights","WriteUsers","ReadUsers","EditOwnPassword","EditOwnOAuthConnections","group","Object","assign","users","serverinfo","ServerClient","getServerInfo","loadGroups","UserGroupClient","listGroups","user","oAuthConnections","Array","from","loadEnums","entries","forEach","k","v","isNaN","key","toLowerCase","val","currentVal","prevState","bitflag","InstanceManagerRights","instanceManagerRights","push","Loading","text","className","map","err","index","ErrorAlert","onClose","prev","newarr","undefined","Fragment","Alert","variant","systemIdentifier","Badge","enabled","name","Button","as","Link","to","AppRoutes","userlist","link","route","Tabs","activeKey","onSelect","newkey","setupMode","history","useredit","Tab","eventKey","title","Col","lg","Row","xs","md","toString","OverlayTrigger","overlay","Tooltip","Date","createdAt","toLocaleString","ref","triggerHandler","value","getTime","now","numeric","updateIntervalInSeconds","createdBy","passwd","onClick","editUser","renderPerms","renderGroups","renderOAuth","oAuthProviderInfos","currentOAuthConnections","keys","length","save","InternalError","ErrorCode","APP_FAIL","jsError","Error","canEditOauth","oAuthConnection","idx","InputGroup","Prepend","Text","Form","Control","custom","disabled","onChange","event","provider","target","idx2","txt","selected","FormControl","externalUserId","Append","hidden","filter","icon","faTrash","some","x","trim","every","htmlFor","Radio","defaultChecked","values","count","show","deleteGroup","faPlus","e","permissionSet","realID","substr","concat","enumname","permprefix","inputs","setBold","inputRef","fieldRef","defaultVal","current","checked","classList","add","remove","setAll","permname","refs","input","field","newset","updateGroup","response2","xl","perm","React","createRef","Check","inline","type","label","fixedWidth","Component"],"mappings":"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","file":"19.da796e4d9d3079b9bcec.js","sourcesContent":["//this should be a proper data store thing eventually but it will do 4 now\nimport Translation from \"../translations/Translation\";\n\nexport interface GlobalObjects {\n    translation?: Translation;\n    setupMode?: boolean;\n}\n\nexport const GlobalObjects: GlobalObjects = {};\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons/faTrash\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FormEvent } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n    AdministrationRights,\n    InstanceManagerRights,\n    OAuthProvider\n} from \"../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport UserGroupClient from \"../../../ApiClient/UserGroupClient\";\nimport { GlobalObjects } from \"../../../utils/globalObjects\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string; tab?: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    user?: Components.Schemas.User;\n    serverinfo?: Components.Schemas.ServerInformation;\n    newOAuthConnections: Components.Schemas.OAuthConnection[];\n    loading: boolean;\n    saving: boolean;\n    permsadmin: { [key: string]: Permission };\n    permsinstance: { [key: string]: Permission };\n    canRead: boolean;\n    canEdit: boolean;\n    //override for if its the current user and it can edit its own password\n    canEditOwnPassword: boolean;\n    canEditOwnOAuth: boolean;\n    tab: string;\n    groups: Components.Schemas.UserGroup[];\n    createGroupName: string;\n}\n\ninterface Permission {\n    readonly bitflag: number;\n    readonly currentVal: boolean;\n}\n\nexport default withRouter(\n    class UserEdit extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.createGroup = this.createGroup.bind(this);\n            this.changeGroup = this.changeGroup.bind(this);\n\n            this.state = {\n                errors: [],\n                loading: true,\n                saving: false,\n                permsadmin: {},\n                permsinstance: {},\n                canRead: false,\n                canEdit: false,\n                canEditOwnPassword: false,\n                canEditOwnOAuth: false,\n                tab: props.match.params.tab || \"info\",\n                groups: [],\n                createGroupName: \"\",\n                newOAuthConnections: []\n            };\n\n            RouteData.selecteduserid = parseInt(props.match.params.id);\n            RouteData.selectedusertab = props.match.params.tab;\n        }\n\n        public componentDidUpdate(prevProps: Readonly<IProps>) {\n            if (prevProps.match.params.tab !== this.props.match.params.tab) {\n                this.setState({\n                    tab: this.props.match.params.tab || \"info\"\n                });\n            }\n        }\n\n        public async componentDidMount(): Promise<void> {\n            const userid = parseInt(this.props.match.params.id);\n            const response = await UserClient.getUser(userid);\n            switch (response.code) {\n                case StatusCode.ERROR: {\n                    this.addError(response.error);\n                    break;\n                }\n                case StatusCode.OK: {\n                    this.loadUser(response.payload);\n                    break;\n                }\n            }\n\n            const currentuser = await UserClient.getCurrentUser();\n            if (currentuser.code == StatusCode.OK) {\n                this.setState({\n                    canEdit: !!(\n                        resolvePermissionSet(currentuser.payload).administrationRights! &\n                        AdministrationRights.WriteUsers\n                    ),\n                    canRead: !!(\n                        resolvePermissionSet(currentuser.payload).administrationRights! &\n                        AdministrationRights.ReadUsers\n                    ),\n                    canEditOwnPassword:\n                        !!(\n                            resolvePermissionSet(currentuser.payload).administrationRights! &\n                            AdministrationRights.EditOwnPassword\n                        ) && currentuser.payload.id! === userid,\n                    canEditOwnOAuth:\n                        !!(\n                            resolvePermissionSet(currentuser.payload).administrationRights! &\n                            AdministrationRights.EditOwnOAuthConnections\n                        ) && currentuser.payload.id! === userid,\n                    groups: currentuser.payload.group\n                        ? [Object.assign({ users: [] }, currentuser.payload.group)]\n                        : []\n                });\n            } else {\n                this.addError(currentuser.error);\n            }\n\n            const serverinfo = await ServerClient.getServerInfo();\n            if (serverinfo.code == StatusCode.OK) {\n                this.setState({\n                    serverinfo: serverinfo.payload\n                });\n            } else {\n                this.addError(serverinfo.error);\n            }\n\n            await this.loadGroups();\n\n            this.setState({\n                loading: false\n            });\n        }\n\n        private async loadGroups() {\n            if (!this.state.canRead) return;\n            const groups = await UserGroupClient.listGroups();\n            if (groups.code === StatusCode.OK) {\n                this.setState({\n                    groups: groups.payload\n                });\n            } else {\n                this.addError(groups.error);\n            }\n        }\n\n        private loadUser(user: Components.Schemas.User) {\n            this.setState({\n                user,\n                newOAuthConnections: user.oAuthConnections ? Array.from(user.oAuthConnections) : []\n            });\n            this.loadEnums();\n        }\n\n        private loadEnums(): void {\n            // noinspection DuplicatedCode\n            Object.entries(AdministrationRights).forEach(([k, v]) => {\n                /* enums are objects that are reverse mapped, for example, an enum with a = 1 and b = 2 would look like this:\n                 * {\n                 *   \"a\": 1,\n                 *   \"b\": 2,\n                 *   1: \"a\",\n                 *   2: \"b\"\n                 * }\n                 * so we need to drop everything that doesnt resolve to a string because otherwise we end up with twice the values\n                 */\n                if (!isNaN(parseInt(k))) return;\n\n                const key = k.toLowerCase();\n                const val = v as number;\n\n                //we dont care about nothing\n                if (key == \"none\") return;\n\n                const currentVal = !!(\n                    resolvePermissionSet(this.state.user!).administrationRights! & val\n                );\n                this.setState(prevState => {\n                    return {\n                        permsadmin: {\n                            ...prevState.permsadmin,\n                            [key]: {\n                                currentVal: currentVal,\n                                bitflag: val\n                            }\n                        }\n                    };\n                });\n            });\n            // noinspection DuplicatedCode\n            Object.entries(InstanceManagerRights).forEach(([k, v]) => {\n                if (!isNaN(parseInt(k))) return;\n\n                const key = k.toLowerCase();\n                const val = v as number;\n\n                //we dont care about nothing\n                if (key == \"none\") return;\n\n                const currentVal = !!(\n                    resolvePermissionSet(this.state.user!).instanceManagerRights! & val\n                );\n                this.setState(prevState => {\n                    return {\n                        permsinstance: {\n                            ...prevState.permsinstance,\n                            [key]: {\n                                currentVal: currentVal,\n                                bitflag: val\n                            }\n                        }\n                    };\n                });\n            });\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.user.load\" />;\n            }\n            if (this.state.saving) {\n                return <Loading text=\"loading.user.save\" />;\n            }\n\n            // noinspection DuplicatedCode\n            const changetabs = (newkey: string | null) => {\n                if (!newkey) return;\n\n                RouteData.selectedusertab = newkey;\n                if (!GlobalObjects.setupMode) {\n                    this.props.history.push(AppRoutes.useredit.link || AppRoutes.useredit.route);\n                }\n                this.setState({\n                    tab: newkey\n                });\n            };\n\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.user ? (\n                        <React.Fragment>\n                            {!this.state.canEdit ? (\n                                <Alert className=\"clearfix\" variant=\"error\">\n                                    <FormattedMessage id=\"view.user.edit.cantedit\" />\n                                </Alert>\n                            ) : (\n                                \"\"\n                            )}\n                            {this.state.user.systemIdentifier ? (\n                                <Badge variant=\"primary\" className=\"mx-1\">\n                                    <FormattedMessage id=\"generic.system.short\" />\n                                </Badge>\n                            ) : (\n                                <Badge variant=\"primary\" className=\"mx-1\">\n                                    <FormattedMessage id=\"generic.tgs\" />\n                                </Badge>\n                            )}\n                            {this.state.user.enabled ? (\n                                <Badge variant=\"success\" className=\"mx-1\">\n                                    <FormattedMessage id=\"generic.enabled\" />\n                                </Badge>\n                            ) : (\n                                <Badge variant=\"danger\" className=\"mx-1\">\n                                    <FormattedMessage id=\"generic.disabled\" />\n                                </Badge>\n                            )}\n                            {this.state.user.group ? (\n                                <Badge variant=\"warning\" className=\"mx-1\">\n                                    <FormattedMessage id=\"generic.grouped\" />\n                                </Badge>\n                            ) : null}\n                            <h3 className=\"text-capitalize\">{this.state.user.name}</h3>\n                            <Button\n                                as={Link}\n                                to={AppRoutes.userlist.link || AppRoutes.userlist.route}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <Tabs\n                                activeKey={this.state.tab}\n                                onSelect={changetabs}\n                                id=\"test\"\n                                className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\">\n                                <Tab eventKey=\"info\" title={<FormattedMessage id=\"generic.info\" />}>\n                                    <Col lg={5} className=\"text-center text-md-left mx-auto\">\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.userid\" />\n                                                </h5>\n                                            </Col>\n                                            <Col className=\"text-capitalize mb-2\">\n                                                {this.state.user.id}\n                                            </Col>\n                                        </Row>\n                                        {this.state.user.systemIdentifier ? (\n                                            <Row xs={1} md={2}>\n                                                <Col>\n                                                    <h5 className=\"m-0\">\n                                                        <FormattedMessage id=\"generic.systemidentifier\" />\n                                                    </h5>\n                                                </Col>\n                                                <Col className=\"mb-2 text-sm-break\">\n                                                    {this.state.user.systemIdentifier}\n                                                </Col>\n                                            </Row>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.enabled\" />\n                                                </h5>\n                                            </Col>\n                                            <Col className=\"text-capitalize mb-2\">\n                                                {this.state.user.enabled!.toString()}\n                                            </Col>\n                                        </Row>\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.created\" />\n                                                </h5>\n                                            </Col>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`${this.state.user.name}-tooltip`}>\n                                                        {new Date(\n                                                            this.state.user.createdAt!\n                                                        ).toLocaleString()}\n                                                    </Tooltip>\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <Col\n                                                        className=\"text-capitalize mb-2\"\n                                                        {...triggerHandler}>\n                                                        <span\n                                                            ref={ref as React.Ref<HTMLSpanElement>}>\n                                                            <FormattedRelativeTime\n                                                                value={\n                                                                    (new Date(\n                                                                        this.state.user!.createdAt!\n                                                                    ).getTime() -\n                                                                        Date.now()) /\n                                                                    1000\n                                                                }\n                                                                numeric=\"auto\"\n                                                                updateIntervalInSeconds={1}\n                                                            />\n                                                        </span>\n                                                    </Col>\n                                                )}\n                                            </OverlayTrigger>\n                                        </Row>\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.createdby\" />\n                                                </h5>\n                                            </Col>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip\n                                                        id={`${this.state.user.name}-tooltip-createdby`}>\n                                                        <FormattedMessage id=\"generic.userid\" />\n                                                        {this.state.user.createdBy.id}\n                                                    </Tooltip>\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <Col\n                                                        className=\"text-capitalize mb-2\"\n                                                        {...triggerHandler}>\n                                                        <span\n                                                            ref={ref as React.Ref<HTMLSpanElement>}>\n                                                            {this.state.user!.createdBy.name}\n                                                        </span>\n                                                    </Col>\n                                                )}\n                                            </OverlayTrigger>\n                                        </Row>\n                                        <div className=\"text-center mt-3\">\n                                            {this.state.canEdit || this.state.canEditOwnPassword ? (\n                                                <Button\n                                                    className=\"mr-2\"\n                                                    as={Link}\n                                                    to={\n                                                        (AppRoutes.passwd.link ||\n                                                            AppRoutes.passwd.route) +\n                                                        this.state.user.id!.toString()\n                                                    }>\n                                                    <FormattedMessage id=\"routes.passwd\" />\n                                                </Button>\n                                            ) : (\n                                                \"\"\n                                            )}\n                                            {this.state.canEdit ? (\n                                                <Button\n                                                    variant={\n                                                        this.state.user.enabled\n                                                            ? \"danger\"\n                                                            : \"success\"\n                                                    }\n                                                    onClick={async () => {\n                                                        this.setState({\n                                                            saving: true\n                                                        });\n\n                                                        const response = await UserClient.editUser(\n                                                            this.state.user!.id!,\n                                                            {\n                                                                enabled: !this.state.user!.enabled!\n                                                            }\n                                                        );\n                                                        if (response.code == StatusCode.OK) {\n                                                            this.loadUser(response.payload);\n                                                        } else {\n                                                            this.addError(response.error);\n                                                        }\n\n                                                        this.setState({\n                                                            saving: false\n                                                        });\n                                                    }}>\n                                                    <FormattedMessage\n                                                        id={\n                                                            this.state.user.enabled\n                                                                ? \"generic.disable\"\n                                                                : \"generic.enable\"\n                                                        }\n                                                    />\n                                                </Button>\n                                            ) : (\n                                                \"\"\n                                            )}\n                                        </div>\n                                    </Col>\n                                </Tab>\n                                <Tab\n                                    eventKey=\"adminperms\"\n                                    title={<FormattedMessage id=\"perms.admin\" />}>\n                                    {this.renderPerms(\"permsadmin\", \"admin\")}\n                                </Tab>\n                                <Tab\n                                    eventKey=\"instanceperms\"\n                                    title={<FormattedMessage id=\"perms.instance\" />}>\n                                    {this.renderPerms(\"permsinstance\", \"instance\")}\n                                </Tab>\n                                <Tab eventKey=\"group\" title={<FormattedMessage id=\"perms.group\" />}>\n                                    {this.renderGroups()}\n                                </Tab>\n                                {this.renderOAuth()}\n                            </Tabs>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                </div>\n            );\n        }\n\n        private renderOAuth(): React.ReactNode {\n            const oAuthProviderInfos = this.state.serverinfo?.oAuthProviderInfos;\n            const currentOAuthConnections =\n                this.state.newOAuthConnections || this.state.user?.oAuthConnections;\n            if (\n                this.state.user?.name.toLowerCase() === \"admin\" || // admin user can't have OAuthConnections\n                currentOAuthConnections == null ||\n                !oAuthProviderInfos ||\n                !Object.keys(oAuthProviderInfos).length\n            )\n                return null;\n\n            const save = async () => {\n                this.setState({\n                    saving: true\n                });\n\n                if (!this.state.user) {\n                    this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(\"this.state.user is null in user edit save\")\n                        })\n                    );\n                    return;\n                }\n\n                const response = await UserClient.editUser(this.state.user.id!, {\n                    oAuthConnections: this.state.newOAuthConnections\n                });\n                if (response.code == StatusCode.OK) {\n                    this.loadUser(response.payload);\n                } else {\n                    this.addError(response.error);\n                }\n\n                this.setState({\n                    saving: false\n                });\n            };\n\n            const canEditOauth = this.state.canEdit || this.state.canEditOwnOAuth;\n\n            return (\n                <Tab\n                    eventKey=\"oauth\"\n                    title={<FormattedMessage id=\"view.user.edit.oauth.connections\" />}>\n                    <h3 className=\"mb-3\">\n                        <FormattedMessage id=\"view.user.edit.oauth.current\" />\n                    </h3>\n                    <div>\n                        {this.state.newOAuthConnections.map((oAuthConnection, idx) => (\n                            <div className=\"justify-content-center d-flex\" key={idx}>\n                                <InputGroup className=\"w-75 mb-1\">\n                                    <InputGroup.Prepend>\n                                        <InputGroup.Text>\n                                            <span>\n                                                <FormattedMessage id=\"view.user.edit.oauth.provider\" />\n                                            </span>\n                                        </InputGroup.Text>\n                                    </InputGroup.Prepend>\n                                    <Form.Control\n                                        className=\"flex-grow-1 flex-md-grow-0 w-50 w-md-auto \"\n                                        as=\"select\"\n                                        custom\n                                        disabled={!canEditOauth}\n                                        onChange={event => {\n                                            const provider = event.target.value as OAuthProvider;\n                                            this.setState(prev => {\n                                                return {\n                                                    newOAuthConnections: prev.newOAuthConnections.map(\n                                                        (val, idx2) => {\n                                                            if (idx2 !== idx) return val;\n                                                            return {\n                                                                ...val,\n                                                                provider: provider\n                                                            };\n                                                        }\n                                                    )\n                                                };\n                                            });\n                                        }}>\n                                        {Object.keys(oAuthProviderInfos).map(key => {\n                                            return (\n                                                <FormattedMessage\n                                                    key={key}\n                                                    id={`view.user.edit.oauth.provider.${key.toLowerCase()}`}>\n                                                    {txt => (\n                                                        <option\n                                                            value={key}\n                                                            selected={\n                                                                oAuthConnection.provider === key\n                                                            }>\n                                                            {txt}\n                                                        </option>\n                                                    )}\n                                                </FormattedMessage>\n                                            );\n                                        })}\n                                    </Form.Control>\n                                    <InputGroup.Text className=\"rounded-0\">\n                                        <FormattedMessage id=\"view.user.edit.oauth.id\" />\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        className=\"\"\n                                        value={oAuthConnection.externalUserId}\n                                        onChange={event => {\n                                            const externalUserId = event.target.value;\n                                            this.setState(prev => {\n                                                return {\n                                                    newOAuthConnections: prev.newOAuthConnections.map(\n                                                        (val, idx2) => {\n                                                            if (idx2 !== idx) return val;\n                                                            return {\n                                                                ...val,\n                                                                externalUserId: externalUserId\n                                                            };\n                                                        }\n                                                    )\n                                                };\n                                            });\n                                        }}\n                                        disabled={!canEditOauth}\n                                    />\n                                    <InputGroup.Append className=\"\">\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"text-darker\"\n                                            hidden={!canEditOauth}\n                                            onClick={() => {\n                                                this.setState(prev => {\n                                                    return {\n                                                        newOAuthConnections: prev.newOAuthConnections.filter(\n                                                            (val, idx2) => idx !== idx2\n                                                        )\n                                                    };\n                                                });\n                                            }}>\n                                            <div>\n                                                <FontAwesomeIcon icon={faTrash} />\n                                            </div>\n                                        </Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </div>\n                        ))}\n                    </div>\n                    {canEditOauth ? (\n                        <div className=\"text-center mt-3\">\n                            <Button\n                                className=\"mr-2\"\n                                onClick={() => {\n                                    this.setState(prev => {\n                                        return {\n                                            newOAuthConnections: [\n                                                ...prev.newOAuthConnections,\n                                                {\n                                                    provider: Object.keys(\n                                                        oAuthProviderInfos\n                                                    )[0] as OAuthProvider,\n                                                    externalUserId: \"\"\n                                                }\n                                            ]\n                                        };\n                                    });\n                                }}>\n                                <FormattedMessage id=\"view.user.edit.oauth.add\" />\n                            </Button>\n                            <Button\n                                onClick={save}\n                                variant=\"success\"\n                                disabled={\n                                    this.state.newOAuthConnections.some(\n                                        x => x.externalUserId.trim().length === 0\n                                    ) ||\n                                    //If all values match up, and the lenght is the same, there has been no change, disable the button\n                                    (this.state.newOAuthConnections.every(\n                                        (val, idx) =>\n                                            val.externalUserId ===\n                                                (this.state.user?.oAuthConnections || [])[idx]\n                                                    ?.externalUserId &&\n                                            val.provider ===\n                                                (this.state.user?.oAuthConnections || [])[idx]\n                                                    ?.provider\n                                    ) &&\n                                        this.state.newOAuthConnections.length ===\n                                            this.state.user?.oAuthConnections?.length)\n                                }>\n                                <FormattedMessage id=\"generic.savepage\" />\n                            </Button>\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </Tab>\n            );\n        }\n\n        private renderGroups(): React.ReactNode {\n            //We can't use addError() here because that would trigger a rerender which would call this again and add another error and so on\n            if (!this.state.user || !this.state.groups) {\n                return (\n                    <ErrorAlert\n                        error={\n                            new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\"Assertion failed, user or group is null\")\n                            })\n                        }\n                    />\n                );\n            }\n\n            return (\n                <div>\n                    {!this.state.canRead ? (\n                        <Alert className=\"clearfix\" variant=\"error\">\n                            <FormattedMessage id=\"perms.group.cantlist\" />\n                        </Alert>\n                    ) : null}\n                    <h3 className=\"mb-3\">\n                        <FormattedMessage id=\"perms.group.current\" />\n                        {this.state.user.group ? (\n                            this.state.user.group.name\n                        ) : (\n                            <FormattedMessage id=\"perms.group.none\" />\n                        )}\n                    </h3>\n                    <div onChange={this.changeGroup}>\n                        <InputGroup\n                            className=\"justify-content-center mb-3\"\n                            as=\"label\"\n                            htmlFor={\n                                \"group_none\" /*notice the underscore, the normal groups use a dash, this prevents conflict with groups named \"none\"*/\n                            }>\n                            <InputGroup.Prepend>\n                                <InputGroup.Radio\n                                    id={\"group_none\"}\n                                    name=\"group\"\n                                    defaultChecked={this.state.user.group?.id === undefined}\n                                    disabled={!this.state.canEdit}\n                                />\n                            </InputGroup.Prepend>\n                            <InputGroup.Append className=\"w-40 overflow-auto\">\n                                <InputGroup.Text className=\"flex-fill\">\n                                    <FormattedMessage id=\"perms.group.none\" />\n                                </InputGroup.Text>\n                            </InputGroup.Append>\n                        </InputGroup>\n                        {this.state.groups.map(group => {\n                            return (\n                                <InputGroup className=\"justify-content-center mb-1\" key={group.id}>\n                                    <InputGroup.Prepend>\n                                        <InputGroup.Radio\n                                            id={\"group-\" + group.id.toString()}\n                                            name=\"group\"\n                                            defaultChecked={this.state.user!.group?.id === group.id}\n                                            disabled={!this.state.canEdit}\n                                        />\n                                    </InputGroup.Prepend>\n                                    <InputGroup.Append className=\"w-40 overflow-auto\">\n                                        <InputGroup.Text\n                                            className=\"flex-fill\"\n                                            as=\"label\"\n                                            htmlFor={\"group-\" + group.id.toString()}>\n                                            <span>{group.name}</span>\n                                            <div className=\"text-right ml-auto\">\n                                                <FormattedMessage\n                                                    id=\"generic.numusers\"\n                                                    values={{\n                                                        count: this.state.canRead\n                                                            ? group.users?.length\n                                                            : \"???\"\n                                                    }}\n                                                />\n                                            </div>\n                                        </InputGroup.Text>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${group.id}-tooltip`}>\n                                                    <FormattedMessage id=\"perms.group.delete.warning\" />\n                                                </Tooltip>\n                                            }\n                                            show={\n                                                (!group.users?.length || !this.state.canEdit) &&\n                                                group.id !== this.state.user!.group?.id\n                                                    ? false\n                                                    : undefined\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <Button\n                                                    variant=\"danger\"\n                                                    className=\"text-darker\"\n                                                    disabled={\n                                                        !!group.users?.length ||\n                                                        !this.state.canEdit ||\n                                                        group.id === this.state.user!.group?.id\n                                                    }\n                                                    onClick={() => void this.deleteGroup(group.id)}\n                                                    {...triggerHandler}>\n                                                    <div ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon icon={faTrash} />\n                                                    </div>\n                                                </Button>\n                                            )}\n                                        </OverlayTrigger>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            );\n                        })}\n                    </div>\n                    {/*<hr />\n                    <h4 className=\"mt-3\">\n                        <FormattedMessage id=\"perms.group.create\" />\n                    </h4>*/}\n                    <InputGroup className=\"justify-content-center mb-1 mt-5\">\n                        <InputGroup.Prepend>\n                            <Button\n                                variant=\"primary\"\n                                onClick={this.createGroup}\n                                disabled={\n                                    !this.state.canEdit || !this.state.createGroupName.length\n                                }>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            className=\"w-40 overflow-auto flex-grow-0\"\n                            value={this.state.createGroupName}\n                            onChange={event => {\n                                this.setState({\n                                    createGroupName: event.target.value\n                                });\n                            }}\n                            disabled={!this.state.canEdit}\n                        />\n                    </InputGroup>\n                </div>\n            );\n        }\n\n        private async changeGroup(e: FormEvent<HTMLDivElement>) {\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in changegroup\")\n                    })\n                );\n                return;\n            }\n\n            this.setState({\n                loading: true\n            });\n            const id = (e.target as HTMLInputElement).id;\n            if (id === \"group_none\") {\n                const response = await UserClient.editUser(this.state.user.id!, {\n                    permissionSet: resolvePermissionSet(this.state.user)\n                });\n                if (response.code === StatusCode.OK) {\n                    await this.loadGroups();\n                    this.loadUser(response.payload);\n                } else {\n                    this.addError(response.error);\n                }\n            } else {\n                const realID = parseInt(id.substr(6));\n                const response = await UserClient.editUser(this.state.user.id!, {\n                    group: {\n                        id: realID\n                    } as Components.Schemas.ShallowUserGroup\n                });\n                if (response.code === StatusCode.OK) {\n                    await this.loadGroups();\n                    this.loadUser(response.payload);\n                } else {\n                    this.addError(response.error);\n                }\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        private async deleteGroup(id: number) {\n            this.setState({\n                loading: true\n            });\n            const response = await UserGroupClient.deleteGroup(id);\n            if (response.code === StatusCode.OK) {\n                this.setState(prev => {\n                    return {\n                        groups: prev.groups.filter(group => group.id !== id)\n                    };\n                });\n            } else {\n                this.addError(response.error);\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        private async createGroup() {\n            this.setState({\n                loading: true\n            });\n            const response = await UserGroupClient.createGroup(\n                this.state.createGroupName,\n                resolvePermissionSet(this.state.user!)\n            );\n            if (response.code === StatusCode.OK) {\n                this.setState(prev => {\n                    return {\n                        groups: prev.groups.concat([response.payload])\n                    };\n                });\n            } else {\n                this.addError(response.error);\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        private renderPerms(\n            enumname: \"permsadmin\" | \"permsinstance\",\n            permprefix: string\n        ): React.ReactNode {\n            const inputs: Record<\n                string,\n                { input: React.RefObject<HTMLInputElement>; field: React.RefObject<HTMLDivElement> }\n            > = {};\n            const setBold = (\n                inputRef: React.RefObject<HTMLInputElement>,\n                fieldRef: React.RefObject<HTMLDivElement>,\n                defaultVal: boolean\n            ) => {\n                if (!inputRef.current || !fieldRef.current) return;\n                if (inputRef.current.checked !== defaultVal) {\n                    fieldRef.current.classList.add(\"font-weight-bold\");\n                } else {\n                    fieldRef.current.classList.remove(\"font-weight-bold\");\n                }\n            };\n            const setAll = (val: boolean): (() => void) => {\n                return () => {\n                    for (const [permname, refs] of Object.entries(inputs)) {\n                        if (!refs.input.current) return;\n\n                        refs.input.current.checked = val;\n                        setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                    }\n                };\n            };\n            const resetAll = () => {\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) continue;\n\n                    refs.input.current.checked = this.state[enumname][permname].currentVal;\n                    setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                }\n            };\n            const save = async () => {\n                this.setState({\n                    saving: true\n                });\n                let bitflag = 0;\n\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) continue;\n\n                    bitflag += refs.input.current.checked\n                        ? this.state[enumname][permname].bitflag\n                        : 0;\n                }\n\n                if (!this.state.user) {\n                    this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(\"this.state.user is null in user edit save\")\n                        })\n                    );\n                    return;\n                }\n\n                if (this.state.user.group) {\n                    const newset = Object.assign(\n                        Object.assign({}, this.state.user.group.permissionSet),\n                        {\n                            [enumname == \"permsadmin\"\n                                ? \"AdministrationRights\"\n                                : \"InstanceManagerRights\"]: bitflag\n                        } as\n                            | { AdministrationRights: AdministrationRights }\n                            | { InstanceManagerRights: InstanceManagerRights }\n                    ) as Components.Schemas.PermissionSet;\n                    const response = await UserGroupClient.updateGroup(this.state.user.group.id, {\n                        permissionSet: newset\n                    });\n                    if (response.code == StatusCode.OK) {\n                        const response2 = await UserClient.getUser(this.state.user.id!);\n                        if (response2.code == StatusCode.OK) {\n                            this.loadUser(response2.payload);\n                        } else {\n                            this.addError(response2.error);\n                        }\n                    } else {\n                        this.addError(response.error);\n                    }\n                } else {\n                    const newset = Object.assign(Object.assign({}, this.state.user.permissionSet), {\n                        [enumname == \"permsadmin\"\n                            ? \"AdministrationRights\"\n                            : \"InstanceManagerRights\"]: bitflag\n                    } as { AdministrationRights: AdministrationRights } | { InstanceManagerRights: InstanceManagerRights });\n                    const response = await UserClient.editUser(this.state.user.id!, {\n                        permissionSet: newset\n                    });\n                    if (response.code == StatusCode.OK) {\n                        this.loadUser(response.payload);\n                    } else {\n                        this.addError(response.error);\n                    }\n                }\n\n                this.setState({\n                    saving: false\n                });\n            };\n            return (\n                <React.Fragment>\n                    {this.state.user?.group ? (\n                        <Alert variant=\"warning\">\n                            <FormattedMessage\n                                id=\"perms.group.warning\"\n                                values={{\n                                    group: `${this.state.user.group.name} (${this.state.user.group.id})`\n                                }}\n                            />\n                        </Alert>\n                    ) : null}\n                    {this.state.canEdit ? (\n                        <React.Fragment>\n                            <h5>\n                                <FormattedMessage id=\"generic.setall\" />\n                            </h5>\n                            <Button onClick={setAll(true)}>\n                                <FormattedMessage id=\"generic.true\" />\n                            </Button>{\" \"}\n                            <Button onClick={setAll(false)}>\n                                <FormattedMessage id=\"generic.false\" />\n                            </Button>{\" \"}\n                            <Button onClick={resetAll}>\n                                <FormattedMessage id=\"generic.reset\" />\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    <Col md={8} lg={7} xl={6} className=\"mx-auto\">\n                        <hr />\n                        {Object.entries(this.state[enumname]).map(([perm, value]) => {\n                            const inputRef = React.createRef<HTMLInputElement>();\n                            const fieldRef = React.createRef<HTMLDivElement>();\n                            inputs[perm] = { input: inputRef, field: fieldRef };\n                            return (\n                                <InputGroup key={perm} as=\"label\" htmlFor={perm} className=\"mb-0\">\n                                    <InputGroup.Prepend className=\"flex-grow-1 overflow-auto\">\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`perms.${permprefix}.${perm}.desc`}>\n                                                    <FormattedMessage\n                                                        id={`perms.${permprefix}.${perm}.desc`}\n                                                    />\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <InputGroup.Text\n                                                    className=\"flex-fill\"\n                                                    ref={fieldRef}>\n                                                    <div {...triggerHandler}>\n                                                        <FormattedMessage\n                                                            id={`perms.${permprefix}.${perm}`}\n                                                        />\n                                                    </div>\n                                                    <div className=\"ml-auto d-flex align-items-center\">\n                                                        <Form.Check\n                                                            inline\n                                                            type=\"switch\"\n                                                            custom\n                                                            id={perm}\n                                                            className=\"d-flex justify-content-center align-content-center mx-2\"\n                                                            label=\"\"\n                                                            ref={inputRef}\n                                                            disabled={!this.state.canEdit}\n                                                            defaultChecked={value.currentVal}\n                                                            onChange={() => {\n                                                                setBold(\n                                                                    inputRef,\n                                                                    fieldRef,\n                                                                    value.currentVal\n                                                                );\n                                                            }}\n                                                        />\n                                                        <div\n                                                            {...triggerHandler}\n                                                            ref={ref as React.Ref<HTMLDivElement>}>\n                                                            <FontAwesomeIcon\n                                                                fixedWidth\n                                                                icon=\"info\"\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </InputGroup.Text>\n                                            )}\n                                        </OverlayTrigger>\n                                    </InputGroup.Prepend>\n                                </InputGroup>\n                            );\n                        })}\n                        <hr />\n                    </Col>\n                    {this.state.canEdit ? (\n                        <Button onClick={save}>\n                            <FormattedMessage id=\"generic.savepage\" />\n                        </Button>\n                    ) : (\n                        \"\"\n                    )}\n                </React.Fragment>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}